/* ================================GOOGLE FONTS========================================== */

@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;600;700&display=swap');  

/* ===============================Variables CSS============================== */

:root {
  /* ===============Colors============================ */
  /* Color mode HSL(hue, saturation, lightness) */
  --first-color: hsl(353, 100%, 65%);
  --title-color: hsl(244, 24%, 26%);
  --text-color: hsl(244, 16%, 43%);
  /* --body-color: hsl(258, 60%, 98%); */
  --container-color: #fff;
/* This is a CSS code snippet that defines three custom CSS variables using the -- notation. These variables are then assigned to different HSL color values.

The first variable --first-color is assigned a hue of 353 degrees, 100% saturation, and 65% lightness, which creates a bright bluish-green color. This color can be used as a primary color in the design.

The second variable --title-color is assigned a hue of 244 degrees, 24% saturation, and 26% lightness, which creates a dark blue color. This color can be used for headings or titles.

The third variable --text-color is assigned a hue of 244 degrees, 16% saturation, and 43% lightness, which creates a dark grey color. This color can be used for body text. */
  /* =================Font and Typography================ */
  /* .5rem = 8px | 1rem = 16px ...*/
  --body-font: 'Rubik', sans-serif;
  --h1-font-size: 2.25rem;
  --h2-font-size: 1.5rem;
  --h3-font-size: 1.25rem;
  --normal-font-size: 1rem;
  --small-font-size: 0.875rem;
  --smaller-font-size: 0.813rem;
  
  /* =================Font Weight================ */
  --font-medium: 500;
  --font-semibold: 600;
  --font-bold: 700;

  /* =================Box Shadow================ */
  --shadow: 0px 5px 20px 0px rgb(69 67 96 / 10%);

  /* =================Border Radius================ */
  --border-radius: 10px;
}

/* Responsive typography */

@media screen and (max-width: 1024px) {
  :root {
    --h1-font-size: 1.75rem;
    --h2-font-size: 1.25rem;
    --h3-font-size: 1rem;
    --normal-font-size: 0.938rem;
    --small-font-size: 0.813rem;
    --smaller-font-size: 0.75rem;
  }
  
}


/* ================================BASE============================== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body, 
button, 
input, 
textarea {
  font-family: var(--body-font);
  font-size: var(--normal-font-size);
}

body {
  /* background-color:var(--body-color); */
  line-height: 1.7;
  color: var(--text-color);
}

h1, h2, h3 {
  color: var(--title-color);
  font-weight: var(--font-semibold);
  line-height: 1.2;
}

ul {
  list-style: none; /*removes the default bullet points or numbers from the list items.*/
}

a {
  text-decoration: none; /*The text-decoration property is used to control the text formatting, specifically the underlining or strike-through of text. By setting text-decoration: none; for an a element, you are removing the default underlining of links. This is often used to make links appear cleaner and less cluttered, and can be styled further using CSS to indicate link states, such as when the link is hovered over or clicked.*/
}


button {
  cursor: pointer;
  border: none;
  outline: none;

}

/* This CSS code sets the maximum width of images to be 100% of their container while maintaining their aspect ratio by setting the height to auto. */
/*This is a common CSS rule for responsive images, as it ensures that images are sized correctly on different screen sizes and devices.*/
img {
  max-width: 100%;
  height: auto;
  vertical-align: middle; /* The vertical-align: middle property aligns the image vertically within its container.*/
}


/* ===================== Reusable CSS Classes======================== */

.container {
  max-width: 100%;
  padding-left: 80px;
  padding-right: 80px;
  /* margin: 0 auto; */ /*The margin: 0 auto; rule centers the container horizontally on the page by setting the left and right margins to auto. This is a common technique for centering block-level elements like divs or sections.*/
}

.grid {

  display: grid;
}

.section {
  padding-top: 7rem;
  padding-bottom: 7rem;
}

.section__title {
  font-size: var(--h1-font-size);
  margin-left: 0.875rem;
  font-weight: var(--font-bold);
  position: relative;
  margin-bottom: 3.75rem;
  
}


.section__title::before {
  content: ''; /*creates an empty pseudo-element that can be styled.*/
  background: url(./assets/dots-bg.svg);
  height: 2.25rem;
  width: 2.25rem;
  position: absolute; /*absolute positions the pseudo-element absolutely with respect to its closest positioned ancestor element.*/
  left: -0.875rem;
  top: -0.875rem;
}

.btn {
  padding: 0.75rem 2rem;
  line-height: 1;
  border-radius: 1rem;
  box-shadow: 0 0 1px rgb(0 0 0 / 0%);
  border: 1px solid transparent;
  color: #fff;
  display: inline-block;
  background-color: var(--first-color);
  font-weight: var(--font-bold);
}

/* This is a CSS @keyframes rule that defines an animation called button-push. The animation will run for the entire duration of the animation, which is set to the default of 1s unless otherwise specified. */
/* This animation is commonly used to create a "push" effect on a button when it is clicked or hovered over. */
@keyframes button-push {
  50% {
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}

.btn:hover {
  animation: button-push 0.3s linear 1;
}







 